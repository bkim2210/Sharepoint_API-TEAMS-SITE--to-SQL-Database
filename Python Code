# Import necessary libraries
import pandas as pd
from datetime import datetime
import sys
import pyodbc
import sqlalchemy as sa
from office365.runtime.auth.client_credential import ClientCredential
from office365.runtime.auth.authentication_context import AuthenticationContext
from office365.sharepoint.client_context import ClientContext
from office365.sharepoint.files.file import File

# Parse command line arguments or use default values
# This section handles command-line arguments for database connection details.
# If arguments are not provided, default values are used.
try:
    script, database, server, auditKey, username, password, loadtype, table = sys.argv
except Exception:
    # Use default values if command-line arguments are not provided
    database = "Enter Your Database Name"
    server = "Enter Your Server Name"
    auditKey = "Enter Your Audit Key"
    username = "Enter applicationID from Azure APP"
    password = "Enter password from Azure APP"
    loadtype = "Enter Load Type"

# Connect to Datawarehouse
# This section connects to the data warehouse using SQL Alchemy and pyodbc.
# It sets up the engine for database interaction.
driver_name = ''
# Determine available drivers for pyodbc
driver_names = [x for x in pyodbc.drivers() if x.endswith(' for SQL Server')]
if driver_names:
    driver_name = driver_names[0]
else:
    print('(No suitable driver found. Cannot connect.)')

# Enable connection using sqlalchemy
connection_string = "DRIVER={" + driver_name + "};SERVER=" + server + ";DATABASE=" + database + ";trusted_connection=yes"
connection_url = sa.engine.URL.create("mssql+pyodbc", query={"odbc_connect": connection_string})
engine = sa.create_engine(connection_url)

tenant_id = 'Enter Tenant Id'

# Replace with your Teams group ID
team_group_id = 'Enter team group id'

# Replace with the File ID of the Excel file
excel_file_id = 'Enter Excel File id'

# Get an access token using client credentials flow
token_url = f'https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token'
token_data = {
    'grant_type': 'client_credentials',
    'client_id': client_id,
    'client_secret': client_secret,
    'scope': 'https://graph.microsoft.com/.default'
}
token_response = requests.post(token_url, data=token_data)
token_json = token_response.json()
access_token = token_json['access_token']

# Get SharePoint site URL from the Teams team
site_url_endpoint = f'https://graph.microsoft.com/v1.0/groups/{team_group_id}/sites/root'
site_url_headers = {'Authorization': 'Bearer ' + access_token}
site_url_response = requests.get(site_url_endpoint, headers=site_url_headers)
site_url_json = site_url_response.json()

# Get the SharePoint site ID from the response
site_id = site_url_json['id']

# Get information about the worksheets within the Excel file
worksheets_url = f'https://graph.microsoft.com/v1.0/sites/{site_id}/drive/items/{excel_file_id}/workbook/worksheets'
worksheets_headers = {'Authorization': 'Bearer ' + access_token}
worksheets_response = requests.get(worksheets_url, headers=worksheets_headers)
worksheets_json = worksheets_response.json()


if 'value' in worksheets_json:
    for worksheet in worksheets_json['value']:
        worksheet_name = worksheet.get('name')
        worksheet_id = worksheet.get('id')
        worksheet_visibility = worksheet.get('visibility')

        # Check if the worksheet is visible and is the "Master Product List"
        if  worksheet_name == 'Master Product List':
            # Get data from the worksheet
            worksheet_data_url = f'https://graph.microsoft.com/v1.0/sites/{site_id}/drive/items/{excel_file_id}/workbook/worksheets/{worksheet_id}/usedRange'
            worksheet_data_headers = {'Authorization': 'Bearer ' + access_token}
            worksheet_data_response = requests.get(worksheet_data_url, headers=worksheet_data_headers)
            worksheet_data_json = worksheet_data_response.json()

            # Extract data from the response excluding the first row
            if 'values' in worksheet_data_json:
                data = worksheet_data_json['values'][1:]  # Exclude the first row

                # Create a DataFrame for the "Master Product List" sheet
                df = pd.DataFrame(data, columns=worksheet_data_json['values'][0])
try:
         df.to_sql(
            name ="Enter Table Name", 
            schema ="Enter Schema", 
            con=engine, 
            index=False, 
            if_exists = "append"
        )
except Exception as e:
    errorLog(engine, e)
    raise e                
